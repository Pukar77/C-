// This is run time polymorphism. In this type of binding the compiler adds code that identifies the object type at runtime then matches the call with the right function definition. This is achieved by using virtual function.
#include <iostream>
using namespace std;
class pukar{
    public:
    virtual void printf(){
        cout<<"Hello i am pukar "<<endl;
    }
    void display(){
        cout<<"I am a coder"<<endl;
    }
    
};
class rimal:public pukar{
    public:
    void printf(){
        cout<<"I am rimal "<<endl;
    }
    void display(){
        cout<<"I am graphic designer"<<endl;
    }
    
};
int main() {
    pukar *ptr = new rimal;
    rimal r;
    ptr= &r;
    ptr-> printf();
    ptr-> display();
    

    return 0;
}
