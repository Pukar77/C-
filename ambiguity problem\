// In multiple inheritances, when one class is derived from two or more base classes then there may be a possibility that the base classes have functions with the same name, and the derived class may not have functions with that name as those of its base classes. If the derived class object needs to access one of the similarly named member functions of the base classes then it results in ambiguity because the compiler gets confused about which baseâ€™s class member function should be called. 
#include <iostream>
using namespace std;
class pukar{
    public:
    void display(){
        cout<<"I am pukar rimal"<<endl;
    }
};
class rimal{
    public:
    void display(){
        cout<<"I am a full stack developer"<<endl;
    }
};
class hari:public pukar, public rimal{
    
};
int main() {
    hari h;
    h.pukar::display();
    h.rimal::display();
   

    return 0;
}
